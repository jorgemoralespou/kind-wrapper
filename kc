#!/bin/bash
#
# kc: Kind cluster
#
DOC="https://github.com/jorgemoralespou/kind-wrapper/blob/master/README.adoc"
SCRIPT_NAME=$(basename "$0")
KIND_BIN='/usr/local/bin/kind'
YTT_BIN='/usr/local/bin/ytt'
KUBECTL_BIN='/usr/local/bin/kubectl'
DOCKER_BIN='/usr/local/bin/docker'

CONFIRM=${CONFIRM:-""}
VERIFY=${VERIFY:-""}
UNINSTALL=${UNINSTALL:-""}

# Handle source locations that might be a symlink (ref: http://bit.ly/2kcvSCS)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

#
# Colors for echo
# 
RED='\033[0;31m'
NC='\033[0m' # No Color

KC_HOME=$HOME/.kc
KC_PROFILES_HOME=$KC_HOME/profiles
# Create KC_HOME if it doesn't exist
[ ! -d $KC_HOME ] && mkdir $KC_HOME
[ ! -d $KC_PROFILES_HOME ] && mkdir $KC_PROFILES_HOME


# DEFAULTS:
__VERSION="1.19.1"


function whichClusterIsRunning {
  # TODO: Properly get cluster name
  local __clusters=$(kind get clusters)
  for clustername in $__clusters
  do
    if [[ "x$(docker ps -f name=$clustername -q)" != "x" ]]; then
      echo "$clustername"
    fi
  done
}


# Commands:
#
# kc up [<name>]
# kc down [<name>]
# kc status [<name>]
# kc list
# kc delete [<name>]


#########
#
# kc up <cluster-name> --options
#
#
#
function up {
  [ "$1" == "-h" ] || [ "$1" == "--help" ] && ${FUNCNAME[0]}.help && return 0

  local _profile="$1"
  #TODO: Check that cluster with name is not already running
#  status &> /dev/null && error_exit "There is a cluster already running. You can not run 2 cluster at the same time"

  if [ "$_profile" == "" ] || [[ "$_profile" == -* ]]
  then
    _profile="kind"
    echo "[INFO] Using default profile: ${_profile}"
  else
    shift # Remove profile name
  fi

  # Parse supported command line, and detect duplicates
  while [ "${1+defined}" ]; do
    local _key=$1
    case $_key in
      --version=*|-v=*)
        [ ! -z "$__PARM_VERSION" ] && echo "Parameter ${_key%=*} has already been set. Remove the duplicate occurence" && exit 1
        __PARM_VERSION="${_key#*=}"
        shift # past argument
        ;;
      --version|-v)
        [ ! -z "$__PARM_VERSION" ] && echo "Parameter $_key has already been set. Remove the duplicate occurence" && exit 1
        __PARM_VERSION="$2"
        shift 2; # past argument
        ;;
      *)  
        echo "Parameter $_key not supported. It will not be used"
        shift
        ;;
    esac
  done

  # TODO: Make selection of "cluster configs/profiles". By default it will be basic
  local CLUSTER_CONFIG="basic"

  # TODO: Check this kind scripts: https://github.com/kameshsampath/jo/tree/master/bin

  # Build command line
  # Test if profile file exists, and if not, create it
  local CMDLINE=""
  if [ ! -e "$KC_PROFILES_HOME/${_profile}.yaml" ]; then
    # Create profile file
    PROCESSED_TEMPLATE=$(${YTT_BIN} -v name=${_profile} -f $DIR/internal/$CLUSTER_CONFIG.yaml -f $DIR/internal/values.yaml > $KC_PROFILES_HOME/${_profile}.yaml)
    RET_VALUE=$?
    [ "$RET_VALUE" != 0 ] && echo "[ERROR] Creating cluster configuration" && return 1
    echo "[INFO] Cluster config created in $KC_PROFILES_HOME/${_profile}.yaml)"
    CMDLINE="${KIND_BIN} create cluster --config=$KC_PROFILES_HOME/${_profile}.yaml"
  else
    CMDLINE="${DOCKER_BIN} start ${_profile}-control-plane"
    ${KUBECTL_BIN} config use-context kind-${_profile}
  fi

# TODO: See how we can specify the version 
#  [ ! -z "$__PARM_VERSION" ] && CMDLINE+=" --version $__PARM_VERSION" || CMDLINE+=" --version $__VERSION"

  echo "[INFO] $CMDLINE"
  eval "$CMDLINE"

  return 0
}

function up.help {
  echo "Starts/Creates a cluster with the given profile name (or default)"
  echo "in case no profile is specified"
  echo ""
  echo "Profile information will be stored in $KC_PROFILES_HOME/<PROFILE>"
  echo ""
  echo "Usage:"
  echo " $SCRIPT_NAME up [<profile>] [<args>]"
  echo ""
  echo "Available Environement variables:"
  echo ""
  echo "ROUTING_SUFFIX (defaults to apps.127.0.0.1.nip.io)"
  echo ""
  echo "Available Arguments:"
  echo ""
  echo ""
  echo "See the documentation at $DOC"
}

function down {
  [ "$1" == "-h" ] || [ "$1" == "--help" ] && ${FUNCNAME[0]}.help && return 0

  local _profile="$1"
  #TODO: Check that cluster with name is not already running
#  status &> /dev/null && error_exit "There is a cluster already running. You can not run 2 cluster at the same time"

  if [ "$_profile" == "" ] || [[ "$_profile" == -* ]]
  then
    _profile="kind"
    echo "[INFO] Using default profile: ${_profile}"
  else
    shift # Remove profile name
  fi

  ${DOCKER_BIN} stop ${_profile}-control-plane
  # TODO: Only unset if it was selected as current context
  ${KUBECTL_BIN} config unset current-context 
}

function down.help {
  echo "Stops the current active cluster. No information will be removed"
  echo "so the cluster can be later started again"
  echo ""
  echo "Usage:"
  echo " $SCRIPT_NAME down"
  echo ""
  echo "See the documentation at $DOC"
}

#
# Args:
#  $1: [-s] silent
function status {
  [ "$1" == "-h" ] || [ "$1" == "--help" ] && ${FUNCNAME[0]}.help && return 0
  # TODO: Get profile
  _profile=$(whichClusterIsRunning)

  local running_cluster=$(${DOCKER_BIN} ps -q -f "name=${_profile}*" -f "status=running")
  if [[ "${running_cluster}" == "" ]]; then
    echo "no cluster running"
  else
    echo "Cluster ${_profile} is running"
    return 1
  fi
  # local stopped_cluster=$(${DOCKER_BIN} ps -q -f "name=${_profile}*" -f "status=exited")
  # [[ "${stopped_cluster}" == "" ]] && echo "no cluster stopped" && return 1
#  echo "oc cluster running. Current profile <$([ -f $KC_HOME/active_profile ] && cat $KC_HOME/active_profile || echo 'unknown')>"
#  ${OC_BINARY} cluster status

  return 0
}

function status.help {
  echo "Displays status information about the active cluster/profile"
  echo ""
  echo "Usage:"
  echo " $SCRIPT_NAME status"
  echo ""
  echo "See the documentation at $DOC"
}

# If the cluster is up, it will bring it down and delete active_profile
# Otherwise will ask for profile
function delete {
  # TODO: Make proper argument removal
  [ "$1" == "-h" ] || [ "$1" == "--help" ] && ${FUNCNAME[0]}.help && return 0
  [ "$1" == "-c" ] || [ "$1" == "--confirm" ] && CONFIRM=true && shift

  local _profile=$(whichClusterIsRunning)
  #TODO: Check that cluster with name is not already running
#  status &> /dev/null && error_exit "There is a cluster already running. You can not run 2 cluster at the same time"

  if [ "$_profile" == "" ] || [[ $_profile == -* ]]
  then
    _profile="kind"
    echo "[INFO] Using default profile: ${_profile}"
  else
    shift # Remove profile name
  fi
  
  echo "[INFO] ${KIND_BIN} delete cluster --name ${_profile}"
  ${KIND_BIN} delete cluster --name ${_profile}
  rm -rf $KC_PROFILES_HOME/${_profile}.yaml
  # TODO: Only unset if it was selected as current context
  # TODO: Delete context in .kube/config
}

function delete.help {
  echo "Deletes the specified cluster, or the current active cluster"
  echo "if none is specified. Use -c/--confirm to skip confirmation prompt"
  echo ""
  echo "All the information store for the profile will be removed"
  echo "- This information is stored in $KC_PROFILES_HOME/<PROFILE>"
  echo "- Also the profile will be cleared from the .kubeconfig file"
  echo "- All the images created by this cluster will be removed"
  echo ""
  echo "Usage:"
  echo " $SCRIPT_NAME destroy [-c || --confirm] [<PROFILE>]"
  echo ""
  echo "See the documentation at $DOC"
}

function list {
  [ "$1" == "-h" ] || [ "$1" == "--help" ] && ${FUNCNAME[0]}.help && return 0

  echo "Profiles:"
  for cluster in $(${KIND_BIN} get clusters)
  do
    echo "- ${cluster}"
  done
}

function list.help {
  echo "List all the available profiles"
  echo ""
  echo "Profiles are located in $KC_PROFILES_HOME"
  echo ""
  echo "Usage:"
  echo " $SCRIPT_NAME list"
  echo ""
  echo "See the documentation at $DOC"
}

function help {
  echo "Usage:"
  echo " $SCRIPT_NAME -h"
  echo ""
  echo "Available Commands:"
  echo ""
  echo "  $SCRIPT_NAME up [profile] [OPTIONS]"
  echo "  $SCRIPT_NAME down"
  echo "  $SCRIPT_NAME delete [profile]"
  echo "  $SCRIPT_NAME list"
  echo "  $SCRIPT_NAME status"
  echo ""
  echo "See the documentation at $DOC"
}

function install_ingress {
  local __addon="ingress"
  echo "installing $__addon"
  # Check that cluster is running
  # Check that we're using the right context
  # Prompt for confirmation
  if [ -n "$CONFIRM" ] && [ "$CONFIRM" == "true" ] ; then
    reply="y"
  else
    echo -e "Cluster: ${RED}${CLUSTER}${NC}"
    echo -e "Configuration: ${RED}${OVERRIDE_FILE}${NC}"
    echo -e "Overlay: ${RED}${OVERLAY_FILE}${NC}"
    echo ""
    echo -e "Are you sure you want to install an $step with the following values? (y/n)"
    read -n 1 -r reply
    echo # move to a new line
  fi
  # Install
  if [[ $reply =~ ^[Yy]$ ]] ; then
    if [ ! -z $UNINSTALL ] ; then
      kapp delete -a $__addon -n default -y
    else
      # TODO: Get current profile name
      ytt -f internal/addons/$__addon --ignore-unknown-comments | kapp deploy -a $__addon -n default --kubeconfig-context kind-test -y -f -

      # We can test ingress using this: https://kind.sigs.k8s.io/docs/user/ingress/#using-ingress
      # But with ingress configured, we have it available at: test.127.0.0.1.nip.io 
    fi
  else
    echo "Installation cancelled"
    exit 1
  fi
}

function install {
  if [[ $# -gt 0 ]]
  then
    key="$1"
    case $key in
      ingress)
        install_ingress
        ;;
      *)
        echo "Can't install addon $key"
        ;;
    esac
  else
    echo "Missing addont to install"
  fi
}

function parse_args {
  while [[ $# -gt 0 ]]
  do
    local key="$1"
    case $key in
      -h|--help)
        SHOW_HELP="true"
        shift # past argument
        ;;
      -v|--verify)
        VERIFY="true"
        shift # past argument
        ;;
      -f|--file)
        OVERRIDE_FILE="$2"
        shift # past argument
        shift # past value
        ;;
      -f=*|--file=*)
        OVERRIDE_FILE="${i#*=}"
        shift # past argument
        ;;
      -o|--overlay)
        OVERLAY_FILE="$2"
        shift # past argument
        shift # past value
        ;;
      -o=*|--overlay=*)
        OVERLAY_FILE="${i#*=}"
        shift # past value
        ;;
      -c|--confirm)
        CONFIRM="true"
        shift # past argument
        ;;
      -u|--uninstall)
        UNINSTALL="true"
        shift # past argument
        ;;
      *)
        echo "Wrong argument $key. Not supported"
        exit 1
        ;;
    esac
  done
#  echo "SHOW_HELP=$SHOW_HELP"
#  echo "OVERRIDE_FILE=$OVERRIDE_FILE"
#  echo "OVERLAY_FILE=$OVERLAY_FILE"
#  echo "CONFIRM=$CONFIRM"
}

if [[ $# -gt 0 ]]
then
  key="$1"
  case $key in
    up)
      shift # past argument
      up "$@"
      ;;
    down)
      shift # past argument
      down "$@"
      ;;
    delete)
      shift # past argument
      delete "$@"
      ;;
    list)
      list
      ;;
    status)
      status
      ;;
    install)
      shift # past argument
      install "$@"
      ;;
    -h|--help)
      help
      ;;
  esac
else
  help
fi
